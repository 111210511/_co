// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Put you code here:
    // Process x
    Mux16(a=x, b=false, sel=zx, out=xZeroed); // Zero x if zx is 1
    Not16(in=xZeroed, out=xNot); // Negate xZeroed
    Mux16(a=xZeroed, b=xNot, sel=nx, out=xProcessed); // Use x or ~x based on nx

    // Process y
    Mux16(a=y, b=false, sel=zy, out=yZeroed); // Zero y if zy is 1
    Not16(in=yZeroed, out=yNot); // Negate yZeroed
    Mux16(a=yZeroed, b=yNot, sel=ny, out=yProcessed); // Use y or ~y based on ny

    // Perform operation
    And16(a=xProcessed, b=yProcessed, out=andResult); // AND operation
    Add16(a=xProcessed, b=yProcessed, out=addResult); // Add operation
    Mux16(a=andResult, b=addResult, sel=f, out=aluOutput); // Select AND or ADD

    // Final output processing
    Not16(in=aluOutput, out=aluNot); // Negate aluOutput
    Mux16(a=aluOutput, b=aluNot, sel=no, out=out); // Use aluOutput or ~aluOutput based on no

    // Compute zr (zero flag)
    Mux16(a=aluOutput,b=aluNot,sel=no,out[0..7]=zrout1,out[8..15]=zrout2);
    Or8Way(in=zrout1, out=lowOr); // Combine first 8 bits
    Or8Way(in=zrout2, out=highOr); // Combine last 8 bits
    Or(a=lowOr, b=highOr, out=anyBitSet); // Combine all bits
    Not(in=anyBitSet, out=zr); // Set zr to 1 if out is zero

    // Compute ng (negative flag)
    And16(a[0..7]=zrout1,a[8..15]=zrout2,b[0..14]=false,b[15]=true,out[0..7]=Ang,out[8..15]=Bng);  
     Or8Way(in=Bng,out=Ong);
     Mux(a=false,b=true,sel=Ong,out=ng);
}   